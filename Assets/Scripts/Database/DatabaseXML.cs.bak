using UnityEngine;
using System.Collections;
using System.Xml;
using System.IO;
using System.Collections.Generic;
using System.Text;

using MadLevelManager;

public class DatabaseXML : Singleton<DatabaseXML> {

    //Andrea is using ID 1 for internal testing
    public int PatientId = 1;
    public TextAsset database_xml_file;
    //create an XML file to keep and read it
    public XmlDocument database_xml;
    //form to send thq ueries
    WWWForm xml_form;
    string xml_query_url;
    //xml file directory
    //for android Application.persistentDataPath
    string xml_file;
    string xml_location;
    //queue for the forms to insert
    Queue<DatabaseQuery> xml_forms_queue;
    bool insert_in_order;
    //urls
    /*public string therapy_daily_insert = "https://ageofalgo.com/LI/therapy_daily_insert.php";
    public string therapy_daily_update = "https://ageofalgo.com/LI/therapy_daily_update.php";
    public string therapy_session_insert = "https://ageofalgo.com/LI/therapy_session_insert.php";
    public string therapy_session_update = "https://ageofalgo.com/LI/therapy_session_update.php";
    public string therapy_challenge_insert = "https://ageofalgo.com/LI/therapy_challenge_insert.php";
    public string therapy_challenge_update = "https://ageofalgo.com/LI/therapy_challenge_update.php";
    public string therapy_block_insert = "https://ageofalgo.com/LI/therapy_block_insert.php"; 
    public string insert_patient_progress = "https://ageofalgo.com/LI/patient_game_update.php";
    public string select_patient_progress = "https://ageofalgo.com/LI/patient_game_select.php";
    */
    public string therapy_daily_insert = "http://italk.ucl.ac.uk/listenin_rct_2016/therapy_daily_insert.php";
    public string therapy_daily_update = "http://italk.ucl.ac.uk/listenin_rct_2016/therapy_daily_update.php";
    public string therapy_session_insert = "http://italk.ucl.ac.uk/listenin_rct_2016/therapy_session_insert.php";
    public string therapy_session_update = "http://italk.ucl.ac.uk/listenin_rct_2016/therapy_session_update.php";
    public string therapy_challenge_insert = "http://italk.ucl.ac.uk/listenin_rct_2016/therapy_challenge_insert.php";
    public string therapy_challenge_update = "http://italk.ucl.ac.uk/listenin_rct_2016/therapy_challenge_update.php";
    public string therapy_block_insert = "http://italk.ucl.ac.uk/listenin_rct_2016/therapy_block_insert.php";
    public string insert_patient_progress = "http://italk.ucl.ac.uk/listenin_rct_2016/patient_game_update.php";
    public string select_patient_progress = "http://italk.ucl.ac.uk/listenin_rct_2016/patient_game_select.php";

    public string therapy_time_insert = "http://italk.ucl.ac.uk/listenin_rct_2016/therapy_time_insert.php";
    public string game_time_insert = "http://italk.ucl.ac.uk/listenin_rct_2016/game_time_insert.php";

    //timers
    float therapy_block_time = 1;
    bool count_therapy_block_time = false;
    //iddle time
    float iddle_time = 1;
    bool count_iddle_time = false;
    //insert daily threapy once
    bool therapy_daily_inserted = false;

    public void InitializeDatabase()
    {
        Debug.Log(Application.persistentDataPath);
        xml_file = Application.persistentDataPath + @"/ListenIn/Database/database.xml";
        xml_location = Application.persistentDataPath + @"/ListenIn/Database/";

        //create the document
        database_xml = new XmlDocument();

        //check if directory doesn't exit
        if (!Directory.Exists(Application.persistentDataPath + @"/ListenIn/"))
        {
            //if it doesn't, create it
            Directory.CreateDirectory(xml_location);
            Directory.CreateDirectory(Application.persistentDataPath + @"/ListenIn/Database/backup");
            //create an xml from the local sample one
            database_xml.LoadXml(database_xml_file.text);
            //and save it only once
            database_xml.Save(xml_file);
        }
        //load the xml from the path
        database_xml.LoadXml(File.ReadAllText(xml_file));

        //Debug.Log(Application.persistentDataPath);

        //get id patient from the xml
        PatientId = int.Parse(GetPatient());

        //if internet read the xml
        if (Application.internetReachability == NetworkReachability.ReachableViaLocalAreaNetwork)
        {
            //read the xml
            ReadDatabaseXML();
            //and get the patient progress
            //StartCoroutine(get_patient_progress());
        }
    }

    protected override void Awake()
    {
        //Getting the xml template from the resources
        database_xml_file = Resources.Load("database") as TextAsset;        
    }

    protected void Update()
    {
        //get fingers on screen android only 
        int fingerCount = 0;
        foreach (Touch touch in Input.touches)
        {
            if (touch.phase != TouchPhase.Ended && touch.phase != TouchPhase.Canceled)
                fingerCount++;

        }
        if (fingerCount > 0)
        {
            //if finger, reset the timer
            count_iddle_time = false;
            iddle_time = 1;
        }
        else
        {
            //if no finger, then run the counter
            count_iddle_time = true;
        }

        //block timer
        if (count_therapy_block_time)
        {
            therapy_block_time += Time.deltaTime;
            //Debug.Log((int)therapy_block_time);
        }

        //iddle timer
        if (count_iddle_time)
        {
            iddle_time += Time.deltaTime;
            //Debug.Log((int)therapy_block_time);
        }
    }

    //return lenght
    public int QueriesOnTheXML()
    {
        XmlNodeList _list = database_xml.SelectNodes("/database/queries/query");
        //if there's none, do nothing
        return _list.Count;
    }
    
    //function which reads the xml in order
    public void ReadDatabaseXML()
    {
        //current time
        string current_date = System.DateTime.Now.ToString("yyyy.MM.dd-hh.mm.ss");
        //Debug.Log(current_date);
        //select all the query tags
        XmlNodeList _list = database_xml.SelectNodes("/database/queries/query");
        //if there's none, do nothing
        if (_list.Count != 0)
        {
            //queue to insert the forms
            xml_forms_queue = new Queue<DatabaseQuery>();
            //go through each one of them
            foreach (XmlNode _node in _list)
            {
                xml_form = new WWWForm();
                //get the url of the query to be send
                xml_query_url = _node.Attributes[0].Value;
                Debug.Log(_node.Attributes[0].Value);
                //go through all the XML variables nodes inside the current query
                foreach (XmlNode _node_variables in _node.ChildNodes)
                {
                    //create the fields for the WWWForm
                    xml_form.AddField(_node_variables.Attributes[0].Value, _node_variables.Attributes[1].Value);
                    //StartCoroutine(send_xml_query());
                    Debug.Log(_node_variables.Attributes[0].Value + " - " + _node_variables.Attributes[1].Value);
                }
                //queue the forms
                xml_forms_queue.Enqueue(new DatabaseQuery(xml_query_url, xml_form));
                Debug.Log("ADDED TO THE QUEUE");
            }
            //go through the queue and insert them in order
            StartCoroutine(send_xml_query());

            //when finishes, save it as the current date in another folder
            string xml_backup = Application.persistentDataPath + @"/ListenIn/Database/backup/" + current_date + ".xml";
            File.Copy(xml_file, xml_backup);
            //empty the inserter xml
            XmlElement elmRoot = (XmlElement)database_xml.SelectSingleNode("/database/queries");
            //remove all
            elmRoot.RemoveAll();
            //and save
            database_xml.Save(xml_file);

            //StartCoroutine("UploadHistory2");

        }
    }

    IEnumerator send_xml_query()
    {
        //first in, first out logic
        foreach (DatabaseQuery form in xml_forms_queue)
        {
            insert_in_order = false;
            WWW xml_www = new WWW(form.query_url, form.query_form);
            while (!insert_in_order)
            {
                yield return xml_www;
                if (xml_www.isDone) insert_in_order = true;
            }
           
        }
        Debug.Log("ENDO OF COURITINE - ALL INSERTED TO THE DB");
    }

    public void uploadHistoryXml()
    {
        StartCoroutine("UploadHistory2");
    }

    IEnumerator UploadHistory2()
    {
        /*map.LoadXml("<?xml version='1.0' encoding='utf-8'?>" +
                "<root>" +
                "</root>");*/

        string strProfile = "";
        string strTherapyBlocks = "";
        string strTherapyBlocksAll = "";
        string strLiExposure = "";
        string strLiComplexity = "";
        string strCiComplexity = "";
        string strCifComplexity = "";
        string strCifHistory = "";
        
        XmlDocument doc1 = new XmlDocument();
        string strXmlFile1 = Application.persistentDataPath + "/" + "user_" + PatientId + "_profile.xml";
        if (System.IO.File.Exists(strXmlFile1))
        {
            doc1.Load(strXmlFile1);
            strProfile = doc1.OuterXml;
        }

        XmlDocument doc2 = new XmlDocument();
        string strXmlFile2 = Application.persistentDataPath + "/" + "user_" + PatientId + "_therapyblocks.xml";
        if (System.IO.File.Exists(strXmlFile2))
        {
            doc2.Load(strXmlFile2);
            strTherapyBlocks = doc2.OuterXml;
        }

        XmlDocument doc3 = new XmlDocument();
        string strXmlFile3 = Application.persistentDataPath + "/" + "user_" + PatientId + "_therapyblocks_all.xml";
        if (System.IO.File.Exists(strXmlFile3))
        {
            doc3.Load(strXmlFile3);
            strTherapyBlocksAll = doc3.OuterXml;
        }

        string strCsvFile4 = Application.persistentDataPath + "/" + "user_" + PatientId + "_lexicalitem_history_exposure.csv";
        if (System.IO.File.Exists(strCsvFile4))
            strLiExposure = System.IO.File.ReadAllText(strCsvFile4);            
        
        string strCsvFile5 = Application.persistentDataPath + "/" + "user_" + PatientId + "_lexicalitem_history_complexity.csv";
        if (System.IO.File.Exists(strCsvFile5))
            strLiComplexity = System.IO.File.ReadAllText(strCsvFile5);
        
        string strCsvFile6 = Application.persistentDataPath + "/" + "user_" + PatientId + "_challengeitem_history_complexity.csv";
        if (System.IO.File.Exists(strCsvFile6))
            strCiComplexity = System.IO.File.ReadAllText(strCsvFile6);
        
        string strCsvFile7 = Application.persistentDataPath + "/" + "user_" + PatientId + "_challengeitemfeatures_history_complexity.csv";
        if (System.IO.File.Exists(strCsvFile7))
            strCifComplexity = System.IO.File.ReadAllText(strCsvFile7);
        
        XmlDocument doc8 = new XmlDocument();
        string strXmlFile8 = Application.persistentDataPath + "/" + "user_" + PatientId + "_challengeitemfeatures_history.xml";
        if (System.IO.File.Exists(strXmlFile8))
        {
            doc8.Load(strXmlFile8);
            strCifHistory = doc8.OuterXml;
        }        

        // create WWWForm
        WWWForm form = new WWWForm();
        form.AddField("patientid", PatientId.ToString());
        form.AddField("profile", strProfile);
        form.AddField("tb", strTherapyBlocks);
        form.AddField("tbAll", strTherapyBlocksAll);
        form.AddField("liExposure", strLiExposure);
        form.AddField("liComplexity", strLiComplexity);
        form.AddField("ciComplexity", strCiComplexity);
        form.AddField("cifComplexity", strCifComplexity);
        form.AddField("cifHistory", strCifHistory);
        //form.AddBinaryData("file", levelData, fileName, "text/xml");

        //change the url to the url of the php file
        WWW w = new WWW("http://italk.ucl.ac.uk/listenin_rct_2016/therapy_history_insert.php", form);
        
        yield return w;        
        if (w.error != null)
        {
            print(w.error);
            Debug.Log("UploadHistory - error - " + w.error);
        }
        else
        {
            Debug.Log("UploadHistory - done");
        }
    }

    /*
    IEnumerator UploadHistory()
    {
        Debug.Log("UploadHistory - load xml");

        //making a dummy xml level file
        XmlDocument map = new XmlDocument();
        //map.LoadXml(Application.persistentDataPath + "user_1_profile.xml");

        map.LoadXml("<?xml version='1.0' encoding='utf-8'?>" +
                "<root>" +
                "</root>");

        Debug.Log("UploadHistory - encode xml");

        //converting the xml to bytes to be ready for upload
        byte[] levelData = Encoding.UTF8.GetBytes(map.OuterXml);

        //generate a long random file name , to avoid duplicates and overwriting
        //string fileName = Path.GetRandomFileName();
        //fileName = fileName.Substring(0, 6);
        //fileName = fileName.ToUpper();
        //fileName = fileName + ".xml";

        string fileName = "user_1_profile.xml";

        //if you save the generated name, you can make people be able to retrieve the uploaded file, without the needs of listings
        //just provide the level code name , and it will retrieve it just like a qrcode or something like that, please read below the method used to validate the upload,
        //that same method is used to retrieve the just uploaded file, and validate it
        //this method is similar to the one used by the popular game bike baron
        //this method saves you from the hassle of making complex server side back ends which enlists available levels
        //this way you could enlist outstanding levels just by posting the levels code on a blog or forum, this way its easier to share, without the need of user accounts or install procedures
        WWWForm form = new WWWForm();

        print("form created ");

        form.AddField("action", "history upload");

        form.AddField("file", "file");

        form.AddBinaryData("file", levelData, fileName, "text/xml");

        print("binary data added ");
        //change the url to the url of the php file
        WWW w = new WWW("http://italk.ucl.ac.uk/listenin_rct_2016/therapy_history_insert.php", form);
        print("www created");

        yield return w;
        print("after yield w");
        if (w.error != null)
        {
            print("error");
            print(w.error);
            Debug.Log("UploadHistory - error - " + w.error);
        }
        else
        {
            Debug.Log("UploadHistory - done");

            //this part validates the upload, by waiting 5 seconds then trying to retrieve it from the web
            if (w.uploadProgress == 1 && w.isDone)
			{
                yield return new WaitForSeconds(5);
                //change the url to the url of the folder you want it the levels to be stored, the one you specified in the php file
                WWW w2 = new WWW("http://italk.ucl.ac.uk/listenin_rct_2016/" + fileName);
                yield return w2;
                if (w2.error != null)
                {
                    print("error 2");
                    print(w2.error);
                }
                else
                {
                    //then if the retrieval was successful, validate its content to ensure the level file integrity is intact
                    if (w2.text != null && w2.text != "")
					{
                        if (w2.text.Contains("") && w2.text.Contains(""))
						{
                            //and finally announce that everything went well
                            print("Level File " + fileName + " Contents are: \n\n" + w2.text);
                            print("Finished Uploading Level " + fileName);
                        }
						else
						{
                            print("Level File " + fileName + " is Invalid");
                        }
                    }
					else
					{
                        print("Level File " + fileName + " is Empty");
                    }
                }
            }
        }
    }
    */

    //function which inserts queries to the xml file
    public void WriteDatabaseXML(Dictionary<string,string> www_form, string url_www_form)
    {
        //insert daily once
        if (url_www_form != therapy_daily_insert)
        {
            //variable node for the xml
            XmlElement variable_node;

            //get the root element
            XmlElement root_tag = (XmlElement)database_xml.SelectSingleNode("/database/queries");

            //create the query
            XmlElement query_node = database_xml.CreateElement("query");
            query_node.SetAttribute("url", url_www_form);

            //run through the dictornary values (the form to send variables names and values)
            foreach (KeyValuePair<string, string> www_form_values in www_form)
            {
                variable_node = database_xml.CreateElement("variable");
                variable_node.SetAttribute("name", www_form_values.Key);
                variable_node.SetAttribute("value", www_form_values.Value);
                //parenting
                query_node.AppendChild(variable_node);
            }

            //append to root node
            root_tag.AppendChild(query_node);
            //save doc 
            database_xml.Save(xml_file);
        }
        else if(!therapy_daily_inserted)
        {
            //one therapy only
            therapy_daily_inserted = true;
            //variable node for the xml
            XmlElement variable_node;

            //get the root element
            XmlElement root_tag = (XmlElement)database_xml.SelectSingleNode("/database/queries");

            //create the query
            XmlElement query_node = database_xml.CreateElement("query");
            query_node.SetAttribute("url", url_www_form);

            //run through the dictornary values (the form to send variables names and values)
            foreach (KeyValuePair<string, string> www_form_values in www_form)
            {
                variable_node = database_xml.CreateElement("variable");
                variable_node.SetAttribute("name", www_form_values.Key);
                variable_node.SetAttribute("value", www_form_values.Value);
                //parenting
                query_node.AppendChild(variable_node);
            }

            //append to root node
            root_tag.AppendChild(query_node);
            //save doc 
            database_xml.Save(xml_file);
        } 
    }

    void OnApplicationQuit()
    {
        //if the patient played the game, then update the daily therapy - last level played, if not then don't update
        if(QueriesOnTheXML() != 0)
        {
            Dictionary<string, string> query_therapyDailyUpdate = new Dictionary<string, string>();
            query_therapyDailyUpdate.Add("patient", PatientId.ToString());
            query_therapyDailyUpdate.Add("level_end", StateJigsawPuzzle.Instance.currLevelPinball.ToString());
            query_therapyDailyUpdate.Add("total_therapy_time", CUserTherapy.Instance.getTotalTherapyTimeMin().ToString());

            WriteDatabaseXML(query_therapyDailyUpdate, therapy_daily_update);

            //add patient progress to the xml when app close
            Dictionary<string, string> query_patient_game_progress = new Dictionary<string, string>();
            query_patient_game_progress.Add("patient", PatientId.ToString());
            query_patient_game_progress.Add("progress", MadLevelProfile.SaveProfileToString());

            WriteDatabaseXML(query_patient_game_progress, insert_patient_progress);
        }
        

        //TODO update session with correct times
        //patient
        //therapy_time
        //therapy_game_pinball
        //therapy_game_world
        //exit_reason
    }

    //return lenght
    public void SetNewPatient(string patient_id)
    {
        //Save current game data
        StartCoroutine(update_patient_progress(PatientId));

        //get the patient element
        XmlElement patient_element = (XmlElement)database_xml.SelectSingleNode("/database/patient");
        patient_element.SetAttribute("id", patient_id);
        //save doc 
        database_xml.Save(xml_file);
        //set new patient
        PatientId = int.Parse(patient_id);
        
        StartCoroutine(get_patient_progress());

        CUserTherapy.Instance.LoadUserProfile();
    }

    //return lenght
    public string GetPatient()
    {
        //get the patient element
        XmlElement patient_element = (XmlElement)database_xml.SelectSingleNode("/database/patient");
        return patient_element.GetAttribute("id");
    }

    //block timer
    public void SetTherapyBlockTimer()
    {
        count_therapy_block_time = !count_therapy_block_time;
        if (!count_therapy_block_time) therapy_block_time = 1;
    }

    void OnGUI()
    {
        //string block_time_string = ((int)therapy_block_time).ToString();
        //block_time_string = GUI.TextField(new Rect(10, 30, 200, 20), "block time: " + block_time_string + "(s)", 25);

        //string iddle_time_string = ((int)iddle_time).ToString();
        //iddle_time_string = GUI.TextField(new Rect(10, 10, 200, 20), "idle time: "+iddle_time_string+"(s)", 25);
    }

    IEnumerator get_patient_progress()
    {
        //create the the form to send it 
        WWWForm patient_progress_form = new WWWForm();
        patient_progress_form.AddField("patient", PatientId);

        //sql_query = new WWW(insert_patient_url, raw_data, headers);
        WWW sql_patient_progress_login = new WWW(select_patient_progress, patient_progress_form);
        yield return sql_patient_progress_login;

        string patient_game_progress = sql_patient_progress_login.text;

        Debug.Log(patient_game_progress);

        if (patient_game_progress == null || patient_game_progress == string.Empty)
        {
            MadLevelProfile.Reset();            
        }
        else
        {
            MadLevelProfile.LoadProfileFromString(patient_game_progress);
        }

        MadLevel.ReloadCurrent();

    }

    IEnumerator update_patient_progress(int currId)
    {
        //create the the form to send it 
        WWWForm patient_progress_update_form = new WWWForm();
        patient_progress_update_form.AddField("patient", currId);

        string savedState = MadLevelProfile.SaveProfileToString();

        patient_progress_update_form.AddField("progress", savedState);

        Debug.Log(savedState);

        //sql_query = new WWW(insert_patient_url, raw_data, headers);
        WWW sql_patient_progress_update = new WWW(insert_patient_progress, patient_progress_update_form);
        yield return sql_patient_progress_update;
    }
}
